/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-01-24 09:22:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class board_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"col-sm-12\" data-ng-app=\"angularApp\" data-ng-controller=\"angularCtrl\" data-ng-init=\"getBoardInit()\" data-ng-class=\"{loading:IsLoading}\">\r\n");
      out.write("\t<button type=\"button\" class=\"btn btn-secondary\" data-ng-click=\"btn_boardInsertForm()\">글쓰기</button>\r\n");
      out.write("\t<!-- 게시판  -->\r\n");
      out.write("\t<table class=\"table table-dark table-hover\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>글번호</th>\r\n");
      out.write("\t\t\t\t<th>글제목</th>\r\n");
      out.write("\t\t\t\t<th>글쓴이</th>\r\n");
      out.write("\t\t\t\t<th>글작성날짜</th>\r\n");
      out.write("\t\t\t\t<th>조회수</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t\t<tr data-ng-if=\"boardList != null\" data-ng-repeat=\"list in boardList | limitTo : 5 : ((pagingNowPage-1)*5) \">\r\n");
      out.write("\t\t\t\t\t<td>{{(((pagingNowPage - 1) * 5) + 1)+$index}}</td>\r\n");
      out.write("\t\t\t\t\t<td style=\"cursor:pointer;\" data-ng-click=\"btn_selectTitle(list.BOARD_NO)\">{{list.BOARD_TITLE}}</td>\r\n");
      out.write("\t\t\t\t\t<td style=\"cursor:pointer;\" data-ng-click=\"btn_selectWriter(list.BOARD_WRITER)\">{{list.BOARD_WRITER}}</td>\r\n");
      out.write("\t\t\t\t\t<td>{{list.BOARD_DATE}}</td>\r\n");
      out.write("\t\t\t\t\t<td>{{list.BOARD_HIT}}</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr data-ng-if=\"boardList == null\"><td colspan=\"5\">조회 결과가 없습니다.</td></tr>\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<div style=\"flex: 0 0 23%;max-width: 23%;\"></div>\r\n");
      out.write("\t\t<!-- 페이징  -->\r\n");
      out.write("\t\t<ul class=\"pagingItem\" data-ng-repeat=\"item in pagingArray | limitTo : pagingArray.length\">\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$first && pagingNowPage == pagingStartNo && pagingNowBlock == 1\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" disabled>&lt;&lt;</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$first && (pagingNowPage != pagingStartNo || pagingNowBlock != 1)\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" data-ng-click=\"btn_pagingFirst()\">&lt;&lt;</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$first && pagingNowPage == pagingStartNo && pagingNowBlock == 1\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" disabled>&lt;</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$first && (pagingNowPage != pagingStartNo || pagingNowBlock != 1)\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" data-ng-click=\"btn_pagingPrev()\">&lt;</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"pagingNowPage == item\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" disabled  style=\"font-weight : bold;\">{{item}}</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"pagingNowPage != item\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" data-ng-click=\"btn_pagingPick(item)\">{{item}}</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$last && pagingNowPage == pagingEndNo && pagingNowBlock == pagingTotalBlock\" style=\"padding : 3px;\"style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" disabled>&gt;</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$last && (pagingNowPage != pagingEndNo || pagingNowBlock != pagingTotalBlock)\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" data-ng-click=\"btn_pagingNext()\">&gt;</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$last && pagingNowPage == pagingEndNo && pagingNowBlock == pagingTotalBlock\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" disabled>&gt;&gt;</button></li>\r\n");
      out.write("\t\t\t<li class=\"pagingItem\" data-ng-if=\"$last && (pagingNowPage != pagingEndNo || pagingNowBlock != pagingTotalBlock)\" style=\"padding : 3px;\"><button type=\"button\" class=\"btn btn-secondary\" data-ng-click=\"btn_pagingLast()\">&gt;&gt;</button></li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"loadingModal\"></div>\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
